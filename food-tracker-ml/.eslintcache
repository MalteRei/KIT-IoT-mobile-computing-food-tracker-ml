[{"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\index.tsx":"1","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\reportWebVitals.ts":"2","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\App.tsx":"3","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\camera-stream-component\\CameraStream.tsx":"4","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\camera-feed-component\\CameraFeed.tsx":"5","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\video-prediction-component\\VideoPrediction.tsx":"6","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\ImageModel.ts":"7","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\food-tracker-container\\FoodTrackerContainer.tsx":"8","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\prompt-component\\Prompt.tsx":"9","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\food-prediction-result-component\\FoodPredictionResult.tsx":"10","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\image-model-container\\ImageModelContainer.tsx":"11","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\nutrition-panel-component\\NutritionPanel.tsx":"12","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\button-row-component\\ButtonRowComponent.tsx":"13","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\two-pane-prompt-component\\TwoPanePrompt.tsx":"14","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\models\\Icons.ts":"15","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\icon-button-component\\IconButton.tsx":"16","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\IconFactory.tsx":"17","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\assets\\icons\\DismissIcon.tsx":"18","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\NutritionService.ts":"19","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\label-value-component\\LabelValue.tsx":"20","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\add-food-diary-entry-component\\AddFoodDiaryEntry.tsx":"21","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\assets\\icons\\CheckmarkIcon.tsx":"22","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\assets\\icons\\AddIcon.tsx":"23","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\FoodDiaryService.ts":"24","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\panel-component\\Panel.tsx":"25","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\round-icon-button-component\\RoundIconButton.tsx":"26","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\food-dairy-container-component\\FoodDiaryContainer.tsx":"27","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\panel-top-row-component\\PanelTopRow.tsx":"28","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\tab-item-component\\TabItem.tsx":"29","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\tabs-component\\Tabs.tsx":"30","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\tab-component\\Tab.tsx":"31","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\day-nutrition-statistic-component\\DayNutritionStatistic.tsx":"32","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\circular-pie-chart-component\\CircularPieChart.tsx":"33","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\circle-pie-piece-component\\CirclePiePiece.tsx":"34"},{"size":500,"mtime":499162500000,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":214,"mtime":1611943387371,"results":"38","hashOfConfig":"36"},{"size":2803,"mtime":1611950078887,"results":"39","hashOfConfig":"36"},{"size":943,"mtime":1612287176696,"results":"40","hashOfConfig":"36"},{"size":1548,"mtime":1612291260117,"results":"41","hashOfConfig":"36"},{"size":6979,"mtime":1612289778399,"results":"42","hashOfConfig":"36"},{"size":1498,"mtime":1614367534702,"results":"43","hashOfConfig":"36"},{"size":1990,"mtime":1614267842060,"results":"44","hashOfConfig":"36"},{"size":1485,"mtime":1614272309927,"results":"45","hashOfConfig":"36"},{"size":1654,"mtime":1612291260117,"results":"46","hashOfConfig":"36"},{"size":3187,"mtime":1614373628938,"results":"47","hashOfConfig":"36"},{"size":521,"mtime":1614267842060,"results":"48","hashOfConfig":"36"},{"size":2124,"mtime":1614369522211,"results":"49","hashOfConfig":"36"},{"size":78,"mtime":1614361907463,"results":"50","hashOfConfig":"36"},{"size":663,"mtime":1614362006086,"results":"51","hashOfConfig":"36"},{"size":619,"mtime":1614361942906,"results":"52","hashOfConfig":"36"},{"size":895,"mtime":1614361894847,"results":"53","hashOfConfig":"36"},{"size":899,"mtime":1614363611259,"results":"54","hashOfConfig":"36"},{"size":445,"mtime":1614273965164,"results":"55","hashOfConfig":"36"},{"size":2185,"mtime":1614364303615,"results":"56","hashOfConfig":"36"},{"size":879,"mtime":1614363301282,"results":"57","hashOfConfig":"36"},{"size":771,"mtime":1614361894846,"results":"58","hashOfConfig":"36"},{"size":2263,"mtime":1614444411089,"results":"59","hashOfConfig":"36"},{"size":327,"mtime":1614366139257,"results":"60","hashOfConfig":"36"},{"size":712,"mtime":1614369806015,"results":"61","hashOfConfig":"36"},{"size":3779,"mtime":1614443989826,"results":"62","hashOfConfig":"36"},{"size":530,"mtime":1614373628938,"results":"63","hashOfConfig":"36"},{"size":295,"mtime":1614448272521,"results":"64","hashOfConfig":"36"},{"size":1330,"mtime":1614444841762,"results":"65","hashOfConfig":"36"},{"size":545,"mtime":1614444696234,"results":"66","hashOfConfig":"36"},{"size":413,"mtime":1614447527004,"results":"67","hashOfConfig":"36"},{"size":1232,"mtime":1614498919053,"results":"68","hashOfConfig":"36"},{"size":3358,"mtime":1614498781709,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"6oxpyz",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"72"},"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\index.tsx",[],["148","149"],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\reportWebVitals.ts",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\App.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\camera-stream-component\\CameraStream.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\camera-feed-component\\CameraFeed.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\video-prediction-component\\VideoPrediction.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\ImageModel.ts",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\food-tracker-container\\FoodTrackerContainer.tsx",["150","151","152"],"import React, { useState} from 'react';\r\nimport CameraFeed from '../camera-feed-component/CameraFeed';\r\nimport CameraStream from '../camera-stream-component/CameraStream';\r\nimport FoodDiaryContainer from '../food-dairy-container-component/FoodDiaryContainer';\r\nimport FoodPredictionResult from '../food-prediction-result-component/FoodPredictionResult';\r\nimport ImageModelContainer from '../image-model-container/ImageModelContainer';\r\nimport IPrediction from '../models/IPrediction';\r\nimport VideoPrediction from '../video-prediction-component/VideoPrediction';\r\n\r\nconst FoodTrackerContainer: React.FunctionComponent = (props) => {\r\n    const [cameraStream, setCameraStream] = useState<MediaStream | undefined>(undefined);\r\n    const [cameraFeedVideoElement, setCameraFeedVideoElement] = useState<HTMLVideoElement | undefined>(undefined);\r\n    \r\n    const handleCameraStreamEnabled = (stream: MediaStream) => {\r\n        setCameraStream(stream);\r\n    }\r\n\r\n    const handleVideoFeedAvailable = (videoElement: HTMLVideoElement) => {\r\n        setCameraFeedVideoElement(videoElement);\r\n    }\r\n\r\n   \r\n\r\n    return(\r\n        <main>\r\n            <CameraFeed cameraStream={cameraStream} onVideoStreamAvailable={handleVideoFeedAvailable}/>\r\n            <ImageModelContainer videoElementToPredict={cameraFeedVideoElement}/>\r\n            <FoodDiaryContainer/>\r\n            <CameraStream onCameraStreamEnabled={handleCameraStreamEnabled} />\r\n\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default FoodTrackerContainer;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\prompt-component\\Prompt.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\food-prediction-result-component\\FoodPredictionResult.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\image-model-container\\ImageModelContainer.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\nutrition-panel-component\\NutritionPanel.tsx",["153"],"import React, { useState } from 'react';\r\nimport Prompt from '../prompt-component/Prompt';\r\nimport ButtonRowComponent from '../button-row-component/ButtonRowComponent';\r\nimport IconButton from '../icon-button-component/IconButton';\r\nimport Icons from '../models/Icons';\r\nimport './NutritionPanel.css';\r\nimport NutritionService from '../helpers/NutritionService';\r\nimport LabelValue from '../label-value-component/LabelValue';\r\nimport AddFoodDiaryEntry from '../add-food-diary-entry-component/AddFoodDiaryEntry';\r\nimport Panel from '../panel-component/Panel';\r\n\r\nexport interface INutritionPanelProps {\r\n    foodToShowNutritionOf: string;\r\n    onDismissed: () => void\r\n}\r\n\r\nconst nutritionService = new NutritionService();\r\n\r\nconst NutritionPanel: React.FunctionComponent<INutritionPanelProps> = (props) => {\r\n    const { foodToShowNutritionOf, onDismissed } = props;\r\n    const [amountFactor, setAmountFactor] = useState<number>(1);\r\n\r\n    const nutritionalValues = nutritionService.getNutritionalValueOf(foodToShowNutritionOf);\r\n    if(!nutritionalValues) {\r\n        return (\r\n            <div>\r\n                <h1>Not found</h1>\r\n                <p>Sorry, we could not look up the nutritional value for {foodToShowNutritionOf}.</p>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n    const roundDecimalPlace = 100;\r\n   \r\n    const kiloCalories =Math.round(nutritionalValues.kiloCalories * amountFactor * roundDecimalPlace) / roundDecimalPlace;\r\n    const kiloJoule = Math.round(nutritionalValues.kiloJoule * amountFactor * roundDecimalPlace) / roundDecimalPlace;\r\n    const fat = Math.round(nutritionalValues.fat * amountFactor * roundDecimalPlace) / roundDecimalPlace;\r\n    const carbohydrates = Math.round(nutritionalValues.carbohydrates * amountFactor * roundDecimalPlace) / roundDecimalPlace;\r\n    const protein = Math.round(nutritionalValues.protein * amountFactor * roundDecimalPlace) / roundDecimalPlace;\r\n    const handleAmountChange = (gramm: number) => {\r\n        console.dir(gramm);\r\n        const newFactor = gramm/100;\r\n        setAmountFactor(newFactor);\r\n    }\r\n    return (\r\n        <section className=\"nutrition-container\">\r\n            <Panel>\r\n                <div className=\"flex-row\">\r\n                    <h3>\r\n                        {foodToShowNutritionOf}\r\n                    </h3>\r\n                <ButtonRowComponent><IconButton onClick={() => onDismissed()} icon={Icons.Dismiss} /></ButtonRowComponent>\r\n                </div>\r\n              \r\n                <h4>Calories</h4>\r\n                <div className=\"flex-row\">\r\n                    <LabelValue label='kcal' value={kiloCalories.toString()}/>\r\n                    <LabelValue label='kJ' value={kiloJoule.toString()}/>\r\n\r\n                </div>\r\n                    <LabelValue label='Fat' value={fat.toString()+ ' g'}/>\r\n                    <LabelValue label='Carbohydrate' value={carbohydrates.toString()+ ' g'}/>\r\n                    <LabelValue label='Protein' value={protein.toString() + ' g'}/>\r\n                <AddFoodDiaryEntry onFoodAmountChanged={handleAmountChange} foodName={foodToShowNutritionOf}/>\r\n                \r\n            </Panel>\r\n\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default NutritionPanel;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\button-row-component\\ButtonRowComponent.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\two-pane-prompt-component\\TwoPanePrompt.tsx",["154"],"import React from 'react';\r\nimport ButtonRowComponent from '../button-row-component/ButtonRowComponent';\r\nimport './TwoPanePrompt.css';\r\n\r\nexport interface ITwoPanePrompt{\r\n    /* Overwrite which child of this component should be the left pane*/\r\n    leftPaneChildrenIndex?: number,\r\n    /* Overwrite which child of this component should be the right pane*/\r\n    rightPaneChildrenIndex?: number,\r\n}\r\nconst TwoPanePrompt: React.FunctionComponent<ITwoPanePrompt> = (props) => {\r\n    const { leftPaneChildrenIndex, rightPaneChildrenIndex,children} = props;\r\n    if(!children) {\r\n        return null;\r\n    }\r\n\r\n    const childrenArray = React.Children.toArray(children);\r\n    let leftPaneContent = null;\r\n    let rightPaneContent = null;\r\n\r\n    \r\n    if(leftPaneChildrenIndex !== undefined && leftPaneChildrenIndex < childrenArray.length) {\r\n            leftPaneContent = childrenArray[leftPaneChildrenIndex];\r\n    } else {\r\n        if(childrenArray.length >= 2) {\r\n            if(rightPaneChildrenIndex !== 0) {\r\n                leftPaneContent = childrenArray[0];\r\n            } else {\r\n                leftPaneContent = childrenArray[1];\r\n            }\r\n        }\r\n    }\r\n    if(rightPaneChildrenIndex !== undefined && rightPaneChildrenIndex < childrenArray.length) {\r\n            rightPaneContent = childrenArray[rightPaneChildrenIndex];\r\n    } else {\r\n        if(childrenArray.length >= 2) {\r\n            if(leftPaneChildrenIndex !== 1) {\r\n                rightPaneContent = childrenArray[1];\r\n            }\r\n        } else if(childrenArray.length === 1) {\r\n            if(leftPaneChildrenIndex !== 0) {\r\n                rightPaneContent = childrenArray[0];\r\n            }\r\n        } \r\n    }\r\n    \r\n    const leftElement = (leftPaneContent !== null) ? <div className=\"left-pane-content pane-content\">{leftPaneContent}</div> : null;\r\n    const rightElement = (rightPaneContent !== null) ? <div className=\"right-pane-content pane-content\">{rightPaneContent}</div> : null;\r\n\r\n    return(\r\n        <section>\r\n            {leftElement}\r\n            {rightElement}\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\nexport default TwoPanePrompt;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\models\\Icons.ts",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\icon-button-component\\IconButton.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\IconFactory.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\assets\\icons\\DismissIcon.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\NutritionService.ts",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\label-value-component\\LabelValue.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\add-food-diary-entry-component\\AddFoodDiaryEntry.tsx",[],["155","156"],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\assets\\icons\\CheckmarkIcon.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\assets\\icons\\AddIcon.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\helpers\\FoodDiaryService.ts",["157"],"import IFoodDiaryEntry from \"../models/IFoodDiaryEntry\";\r\nimport { INutritionalValue } from \"./NutritionService\";\r\n\r\nclass FoodDiaryService {\r\n    addFoodToToday(foodName: string, amountInGramm: number) {\r\n        if(amountInGramm <= 0){\r\n            return;\r\n        }\r\n        if (typeof(Storage) !== \"undefined\") {\r\n            // Store\r\n            const today = new Date();\r\n            const todayDateString = today.toDateString();\r\n            const existingFoodsString = localStorage.getItem(todayDateString);\r\n            let foodsWithNewFood: IFoodDiaryEntry[] = [];\r\n            foodsWithNewFood.push({\r\n                foodName: foodName,\r\n                amountInGramm: amountInGramm\r\n            });\r\n            if(existingFoodsString !== null) {\r\n                const exisitingFoods = JSON.parse(existingFoodsString) as IFoodDiaryEntry[];\r\n                if(exisitingFoods && exisitingFoods.length > 0) {\r\n                    foodsWithNewFood = exisitingFoods;\r\n                    const existingFoodWithName = exisitingFoods.find(foodEntry => foodEntry.foodName === foodName);\r\n                    if(existingFoodWithName) {\r\n                        const amountOfFoodAddedUp = existingFoodWithName.amountInGramm + amountInGramm;\r\n                        existingFoodWithName.amountInGramm = amountOfFoodAddedUp;\r\n                    } \r\n                }\r\n              \r\n            } \r\n            localStorage.setItem(todayDateString, JSON.stringify(foodsWithNewFood));\r\n            \r\n        }\r\n    }\r\n\r\n    getFoodsOfDay(day: Date): IFoodDiaryEntry[]{\r\n        if (typeof(Storage) !== \"undefined\") {\r\n            const dateString = day.toDateString();\r\n            const existingFoodsString = localStorage.getItem(dateString);\r\n            if(existingFoodsString !== null) {\r\n                console.dir(existingFoodsString);\r\n                const exisitingFoods = JSON.parse(existingFoodsString) as IFoodDiaryEntry[];\r\n                if(exisitingFoods && exisitingFoods.length > 0) {\r\n                    return exisitingFoods;\r\n                }\r\n\r\n            }\r\n          }\r\n          return [];\r\n    }\r\n\r\n    isAvailable(): boolean {\r\n        return  typeof(Storage) !== \"undefined\";\r\n    }\r\n\r\n}\r\n\r\nexport default FoodDiaryService;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\panel-component\\Panel.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\round-icon-button-component\\RoundIconButton.tsx",["158"],"import React from 'react';\r\nimport IconFactory from '../helpers/IconFactory';\r\nimport { IIconButtonProps } from '../icon-button-component/IconButton';\r\nimport Icons from '../models/Icons';\r\n\r\nconst iconFactory = new IconFactory();\r\nconst RoundIconButton: React.FunctionComponent<IIconButtonProps> = (props) => {\r\n    const {onClick, icon, type} = props;\r\n    return(\r\n        <button type={type} onClick={onClick} style={{backgroundColor: 'transparent', width: '64px', height: '64px', borderRadius: '50%', padding: '4px', display: 'flex', justifyContent: 'center', alignItems: 'center', minWidth: '64px'}}>\r\n            {iconFactory.getIcon(icon)}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default RoundIconButton;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\food-dairy-container-component\\FoodDiaryContainer.tsx",["159","160","161","162"],"import React, { useEffect, useState } from 'react';\r\nimport ButtonRowComponent from '../button-row-component/ButtonRowComponent';\r\nimport DayNutritionStatistic from '../day-nutrition-statistic-component/DayNutritionStatistic';\r\nimport FoodDiaryService from '../helpers/FoodDiaryService';\r\nimport NutritionService from '../helpers/NutritionService';\r\nimport IconButton from '../icon-button-component/IconButton';\r\nimport Icons from '../models/Icons';\r\nimport IFoodDiaryEntry from '../models/IFoodDiaryEntry';\r\nimport Panel from '../panel-component/Panel';\r\nimport PanelTopRow from '../panel-top-row-component/PanelTopRow';\r\nimport RoundIconButton from '../round-icon-button-component/RoundIconButton';\r\nimport TabItem from '../tab-item-component/TabItem';\r\nimport Tabs from '../tabs-component/Tabs';\r\nimport TwoPanePrompt from '../two-pane-prompt-component/TwoPanePrompt';\r\nimport './FoodDiaryContainer.css';\r\n\r\nconst foodDiaryService = new FoodDiaryService();\r\nconst nutritionService = new NutritionService();\r\nconst FoodDiaryContainer: React.FunctionComponent = (props) => {\r\n    const [showDiary, setShowDiary] = useState<boolean>(false);\r\n    const [currentDate, setCurrentDate] = useState<Date>(new Date());\r\n    const [foodEatenOnCurrentDate, setFoodEatenOnCurrentDate] = useState<IFoodDiaryEntry[] | null>(null);\r\n    const handleToggleShowDiary = () => {\r\n        setShowDiary(!showDiary);\r\n    }\r\n    const getFoodForCurrentDate = () => {\r\n        if(foodDiaryService.isAvailable()) {\r\n           return foodDiaryService.getFoodsOfDay(currentDate);\r\n        }\r\n        return [];\r\n    }\r\n    useEffect(() => {\r\n        const foodForCurrentDate = getFoodForCurrentDate();\r\n        setFoodEatenOnCurrentDate(foodForCurrentDate);\r\n    },[currentDate, showDiary]);\r\n\r\n    let diaryPanelContent: JSX.Element | undefined = undefined;\r\n    if(foodDiaryService.isAvailable()) {\r\n        // show food for current date\r\n        if(foodEatenOnCurrentDate) {\r\n            if(foodEatenOnCurrentDate.length > 0) {\r\n                // display nutrition values for the day\r\n                diaryPanelContent = (\r\n                    <Tabs>\r\n                        <TabItem label=\"Tab 1\">\r\n                            <DayNutritionStatistic/>\r\n                        </TabItem>\r\n                        <TabItem label=\"Tab 1\">\r\n                            Tab content 2\r\n                        </TabItem>\r\n                    </Tabs>\r\n                );\r\n            } else {\r\n                // nothing eaten this day\r\n                diaryPanelContent = (<p>\r\n                    No food in diary for {currentDate.toLocaleDateString()}.<br></br><br></br>\r\n                    Scan food with the camera, tap it and add it to today's food diary.\r\n                </p>);\r\n            }\r\n        } else {\r\n            // loading\r\n        }\r\n\r\n    } else {\r\n        diaryPanelContent = (<p>\r\n            Sorry, your browser does not support storing a nutrition diary.\r\n        </p>);\r\n    }\r\n\r\n    const diaryPanel = showDiary? (\r\n        <div className=\"food-diary-panel\">\r\n             <Panel>\r\n\r\n             <PanelTopRow title={currentDate.toLocaleDateString()}>\r\n                <IconButton onClick={handleToggleShowDiary} icon={Icons.Dismiss} />\r\n            </PanelTopRow>\r\n            {diaryPanelContent}\r\n        </Panel>\r\n        </div>\r\n       \r\n    ) : undefined;\r\n    return(\r\n        <TwoPanePrompt leftPaneChildrenIndex={0}>\r\n            <section className=\"food-diary\"> \r\n               \r\n                <div className=\"bottom-row\">\r\n                <RoundIconButton onClick={handleToggleShowDiary} icon={Icons.Add}/>\r\n\r\n                </div>\r\n                {diaryPanel}\r\n            </section>\r\n        </TwoPanePrompt>\r\n    )\r\n}\r\n\r\nexport default FoodDiaryContainer;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\panel-top-row-component\\PanelTopRow.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\tab-item-component\\TabItem.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\tabs-component\\Tabs.tsx",["163","164"],"import React, { useState, ReactElement, ReactNode, ReactChild } from 'react';\r\nimport Tab from '../tab-component/Tab';\r\nimport './Tabs.css';\r\n\r\nexport interface ITabsProps {\r\n    children: ReactElement<ITabsChildProps>[]\r\n}\r\nexport interface ITabsChildProps {\r\n    label: string\r\n}\r\nconst Tabs: React.FunctionComponent<ITabsProps> = (props) => {\r\n    const {children} = props;\r\n    const [activeTabIndex, setActiveTabIndex] = useState(0);\r\n    const tabsChildren = React.Children.toArray(children);\r\n    if(!children || !tabsChildren || tabsChildren.length === 0 || activeTabIndex >= tabsChildren.length) {\r\n        return null;\r\n    }\r\n    const tabs = React.Children.map(children, (child: ReactElement<ITabsChildProps>, index) => {\r\n        let label = `Tab ${index}`;\r\n        if(child.props.label){\r\n           label = child.props.label;\r\n        }\r\n        return (\r\n            <Tab key={`${label}-${index}`} label={label} onClick={() => setActiveTabIndex(index)} isActive={index === activeTabIndex}/>\r\n        );\r\n    });\r\n\r\n    return(\r\n        <section className=\"tabs\">\r\n            <ol className=\"tabs-header\">\r\n                {tabs}\r\n            </ol>\r\n            <div className=\"tab-content\">\r\n                {tabsChildren[activeTabIndex]}\r\n            </div>\r\n        </section>\r\n    );\r\n\r\n}\r\nexport default Tabs;","C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\tab-component\\Tab.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\day-nutrition-statistic-component\\DayNutritionStatistic.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\circular-pie-chart-component\\CircularPieChart.tsx",[],"C:\\Users\\Malte\\Documents\\GitHub\\KIT-IoT-mobile-computing-food-tracker-ml\\food-tracker-ml\\src\\circle-pie-piece-component\\CirclePiePiece.tsx",["165"],"import React, { useRef } from 'react';\r\nimport './CirclePiePiece.css';\r\n\r\nexport interface ICirclePiePieceProps {\r\n    lengthInDegree: number,\r\n    piePieceIndex: number,\r\n    color:string\r\n}\r\nconst CirclePiePiece: React.FunctionComponent<ICirclePiePieceProps> = (props) => {\r\n    const {lengthInDegree, piePieceIndex, color} = props;\r\n    const endMarkerRef = useRef<HTMLDivElement>(null);\r\n    const firstWedgeRef = useRef<HTMLDivElement>(null);\r\n    const secondWedgeRef = useRef<HTMLDivElement>(null);\r\n\r\n    if(lengthInDegree < 0 || lengthInDegree > 360 || piePieceIndex < 0) {\r\n        return null;\r\n    }\r\n    \r\n    const degreeRotationFirstContainer = (lengthInDegree > 180)? 180 : lengthInDegree;\r\n    const degreeRotationSecondContainer = lengthInDegree - degreeRotationFirstContainer;\r\n    if(endMarkerRef.current && firstWedgeRef.current && secondWedgeRef.current && 'animate' in endMarkerRef.current) {\r\n        const animationOptions: KeyframeAnimationOptions = {\r\n            duration: 5000 + (1500*piePieceIndex),\r\n            delay: 200,\r\n            easing: 'linear'\r\n        };\r\n        const keyframesEndMarker: Keyframe[] = [\r\n            {transform: 'rotateZ(0deg)'},\r\n            {transform: 'rotateZ(0deg)', offset: 0.06},\r\n            {transform: `rotateZ(${degreeRotationFirstContainer}deg)`, offset: 0.24},\r\n            {transform: `rotateZ(${lengthInDegree}deg)`, offset: 0.28},\r\n            {transform: `rotateZ(${lengthInDegree}deg)`, offset: 1}\r\n    \r\n        ];\r\n    \r\n        const waitingForPreviousPiePiece = (piePieceIndex === 0)? 0:  1 / (piePieceIndex + 1);\r\n        const keyframesFirstWedge: Keyframe[] = [\r\n            {transform: 'rotateZ(0deg)', offset: 0},\r\n            {transform: 'rotateZ(0deg)', offset: 0.06},\r\n            {transform: `rotateZ(${degreeRotationFirstContainer}deg)`, offset:  0.24},\r\n            {transform: `rotateZ(${degreeRotationFirstContainer}deg)`, offset: 1}\r\n        ];\r\n    \r\n        const keyframesSecondWedge: Keyframe[] = [\r\n            {transform: 'rotateZ(0deg)', offset: 0},\r\n            {transform: 'rotateZ(0deg)', offset: 0.24},\r\n            {transform: `rotateZ(${degreeRotationSecondContainer}deg)`, offset: 0.28},\r\n            {transform: `rotateZ(${degreeRotationSecondContainer}deg)`, offset: 1}\r\n    \r\n        ];\r\n      \r\n            endMarkerRef.current.animate(keyframesEndMarker, animationOptions);\r\n            firstWedgeRef.current.animate(keyframesFirstWedge, animationOptions);\r\n            secondWedgeRef.current.animate(keyframesSecondWedge, animationOptions);\r\n    }\r\n   \r\n   \r\n    return(\r\n        <div className=\"dial\">\r\n            <div className=\"dial-container container1\">\r\n              <div style={{ transform: `rotateZ(${degreeRotationFirstContainer}deg)`, background: color}} ref={firstWedgeRef} className=\"wedge\"></div>\r\n            </div>\r\n            <div className=\"dial-container container2\">\r\n              <div style={{ transform: `rotateZ(${degreeRotationSecondContainer}deg)`, background: color}} ref={secondWedgeRef} className=\"wedge\"></div>\r\n            </div>\r\n            <div style={{background: color}} className=\"marker start\"></div>\r\n            <div style={{transform: `rotateZ(${lengthInDegree}deg)`, background: color}} ref={endMarkerRef} className=\"marker end\"></div>\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default CirclePiePiece;",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":28},{"ruleId":"170","severity":1,"message":"174","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":19},{"ruleId":"170","severity":1,"message":"175","line":8,"column":8,"nodeType":"172","messageId":"173","endLine":8,"endColumn":23},{"ruleId":"170","severity":1,"message":"176","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":14},{"ruleId":"170","severity":1,"message":"177","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":26},{"ruleId":"166","replacedBy":"178"},{"ruleId":"168","replacedBy":"179"},{"ruleId":"170","severity":1,"message":"180","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":27},{"ruleId":"170","severity":1,"message":"181","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"177","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":26},{"ruleId":"170","severity":1,"message":"182","line":18,"column":7,"nodeType":"172","messageId":"173","endLine":18,"endColumn":23},{"ruleId":"170","severity":1,"message":"183","line":21,"column":25,"nodeType":"172","messageId":"173","endLine":21,"endColumn":39},{"ruleId":"184","severity":1,"message":"185","line":35,"column":7,"nodeType":"186","endLine":35,"endColumn":31,"suggestions":"187"},{"ruleId":"170","severity":1,"message":"188","line":1,"column":41,"nodeType":"172","messageId":"173","endLine":1,"endColumn":50},{"ruleId":"170","severity":1,"message":"189","line":1,"column":52,"nodeType":"172","messageId":"173","endLine":1,"endColumn":62},{"ruleId":"170","severity":1,"message":"190","line":36,"column":15,"nodeType":"172","messageId":"173","endLine":36,"endColumn":41},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"@typescript-eslint/no-unused-vars","'FoodPredictionResult' is defined but never used.","Identifier","unusedVar","'IPrediction' is defined but never used.","'VideoPrediction' is defined but never used.","'Prompt' is defined but never used.","'ButtonRowComponent' is defined but never used.",["191"],["192"],"'INutritionalValue' is defined but never used.","'Icons' is defined but never used.","'nutritionService' is assigned a value but never used.","'setCurrentDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFoodForCurrentDate'. Either include it or remove the dependency array.","ArrayExpression",["193"],"'ReactNode' is defined but never used.","'ReactChild' is defined but never used.","'waitingForPreviousPiePiece' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},"Update the dependencies array to be: [currentDate, getFoodForCurrentDate, showDiary]",{"range":"196","text":"197"},[1742,1766],"[currentDate, getFoodForCurrentDate, showDiary]"]